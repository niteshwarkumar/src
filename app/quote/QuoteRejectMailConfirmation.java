/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package app.quote;

import app.client.Client;
import app.client.ClientService;
import app.standardCode.StandardCode;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.*;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import java.util.*;
import app.user.User;
import app.user.UserService;
import javax.mail.*; //for mail
import javax.mail.internet.*; //for mail
import org.apache.struts.validator.DynaValidatorForm;

/**
 *
 * @author Niteshwar
 */
public final class QuoteRejectMailConfirmation extends Action {

    // ----------------------------------------------------- Instance Variables
    /**
     * The
     * <code>Log</code> instance for this application.
     */
    private Log log =
            LogFactory.getLog("org.apache.struts.webapp.Example");

    // --------------------------------------------------------- Public Methods
    /**
     * Process the specified HTTP request, and create the corresponding HTTP
     * response (or forward to another web component that will create it).
     * Return an
     * <code>ActionForward</code> instance describing where and how control
     * should be forwarded, or
     * <code>null</code> if the response has already been completed.
     *
     * @param mapping The ActionMapping used to select this instance
     * @param form The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception Exception if business logic throws an exception
     */
    @Override
    @SuppressWarnings("empty-statement")
    public ActionForward execute(ActionMapping mapping,
            ActionForm form,
            HttpServletRequest request,
            HttpServletResponse response)
            throws Exception {


        DynaValidatorForm met = (DynaValidatorForm) form;
        String fromAddress = "excelnet@xltrans.com";
        //String toAddress ="rdecortie@xltrans.com";
        String toAddress = "niteshwarkumar@gmail.com";
        // String toAddress ="";
        try {
            toAddress += "," + (String) request.getAttribute("pm");
        } catch (Exception e) {
        }
        try {
            toAddress += "," + (String) request.getAttribute("ae");
        } catch (Exception e) {
        }

        User u = UserService.getInstance().getSingleUser((String) request.getSession(false).getAttribute("username"));
        try {
            Client client = ClientService.getInstance().getClient(u.getID_Client());
            toAddress = "niteshwarkumar@gmail.com";
            // String toAddress ="";
            String[] pm = client.getProject_mngr().split(" ", 2);
            String[] ae = client.getProject_mngr().split(" ", 2);
            User user = UserService.getInstance().getSingleUserRealName(pm[0], pm[1]);
            try {
                toAddress += "," + user.getWorkEmail1();
            } catch (Exception e) {
            }
            user = UserService.getInstance().getSingleUserRealName(ae[0], ae[1]);
            try {
                toAddress += "," + user.getWorkEmail1();
            } catch (Exception e) {
            }

        } catch (Exception e) {
        }
        String subject = "Quote Rejected - Excelnet";
        String qNumber = (String) request.getAttribute("qNumber");
        String clientName = (String) request.getAttribute("clientName");
        String approvedBy = (String) request.getAttribute("approvedBy");
        String approvedDate = (String) request.getAttribute("approvedDate");
        String rejectReason = (String) request.getAttribute("rejectReason");
        String body = "Hello,<div><div><br></div>This message is automatically generated by ExcelNet:</div><div><br></div>"
                + "<div>" + approvedBy + " of " + clientName + " has rejected quote <b>" + qNumber + " </b> on &nbsp;" + approvedDate
                + "</div><div><br></div><div>Reason: " + rejectReason + ".</div><div><br></div>"
                + "<div>Best regards,</div><div><br></div><div>ExcelNet</div><div>Auto-administrator</div>";


        try {
            String[] emailList = toAddress.split(",");
            QuoteApprovedMailConfirmation smtpMailSender = new QuoteApprovedMailConfirmation();

//            smtpMailSender.postMail(emailList, subject, body, emailFromAddress);
            //System.out.println("mail send ");
        } catch (Exception e) {
        }
// Forward control to the specified success URI
        return (mapping.findForward("Client"));

    }

    public void postMail(String recipients[], String subject,
            String message, String from) throws MessagingException {
 

        // create a message
        Message msg = StandardCode.getInstance().getMimeMessage();

        // set the from and to address
        //InternetAddress addressFrom = new InternetAddress(from);
        //msg.setFrom(addressFrom);

        InternetAddress[] addressTo = new InternetAddress[recipients.length];
        for (int i = 0; i < recipients.length; i++) {
            addressTo[i] = new InternetAddress(recipients[i]);
        }
        msg.setRecipients(Message.RecipientType.TO, addressTo);


        // Setting the Subject and Content Type
        msg.setSubject(subject);
        msg.setContent(message, "text/html");
        Transport.send(msg);
    }


}
