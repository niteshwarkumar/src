/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package app.project;

import app.admin.AdminService;
import app.admin.Ticker;
import app.extjs.helpers.TeamHelper;
import app.resource.Resource;
import app.resource.ResourceService;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.*;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;
import org.apache.struts.validator.*;
import app.user.*;
import app.security.*;
import app.standardCode.StandardCode;
import app.tools.SendEmail;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 *
 * @author Niteshwar
 */
public class ResourceScoreUpdateAction extends Action {

    // ----------------------------------------------------- Instance Variables
    /**
     * The <code>Log</code> instance for this application.
     */
    private Log log =
            LogFactory.getLog("org.apache.struts.webapp.Example");

    // --------------------------------------------------------- Public Methods
    /**
     * Process the specified HTTP request, and create the corresponding HTTP
     * response (or forward to another web component that will create it).
     * Return an <code>ActionForward</code> instance describing where and how
     * control should be forwarded, or <code>null</code> if the response has
     * already been completed.
     *
     * @param mapping The ActionMapping used to select this instance
     * @param form The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception Exception if business logic throws an exception
     */
    public ActionForward execute(ActionMapping mapping,
            ActionForm form,
            HttpServletRequest request,
            HttpServletResponse response)
            throws Exception {

        // Extract attributes we will need
        MessageResources messages = getResources(request);

        // save errors
        ActionMessages errors = new ActionMessages();

        //START check for login (security)
        if (!SecurityService.getInstance().checkForLogin(request.getSession(false))) {
            return (mapping.findForward("welcome"));
        }
        //END check for login (security)
        User u = UserService.getInstance().getSingleUser((String) request.getSession(false).getAttribute("username"));
        DynaValidatorForm qvpr = (DynaValidatorForm) form;
        String taskId = null;
      //  taskId=
        taskId = (String) qvpr.get("taskId");
        LinTask lt = ProjectService.getInstance().getSingleLinTask(Integer.parseInt(taskId));
        String resourceName = "";


        System.out.println("sdfsdfsdfsdfsdfvsdfs" + (String) qvpr.get("taskId"));
        System.out.println("sdfsdfsdfsdfsdfvsdfs" + (String) qvpr.get("description"));
        lt.setScoreDescription((String) qvpr.get("description"));
        lt.setScore(Integer.parseInt((String) qvpr.get("score")));
        //  lt.setScore(Integer.parseInt((String) qvpr.get("score")));

        ProjectService.getInstance().updateLinTask(lt);

        Resource res = ResourceService.getInstance().getSingleResource(Integer.parseInt(lt.getPersonName()));

        if (!(StandardCode.getInstance().noNull(res.getFirstName())).equalsIgnoreCase("")) {
            resourceName = res.getFirstName() + " " + res.getLastName();
        } else {
            resourceName = res.getCompanyName();
        }

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yy");

        String projectNo = request.getParameter("pno");
        String projectManager = request.getParameter("pm");

        String emailMsgTxt = "<div>Hello,</div><div>&nbsp;</div><div>This message is automatically generated by ExcelNet.</div><div>&nbsp;</div><b>"
                + u.getFirstName() + " " + u.getLastName() + "</b> has made the following entry in the team module for <b>" + resourceName + "</b>:<br>"
                + "<br>=============================<br><br>" + sdf.format(cal.getTime()) + " &ndash; <b>" + (String) qvpr.get("score") + "</b> &ndash; <b>" + (String) qvpr.get("pNo") + "</b><br><br>" + (String) qvpr.get("description") + "<br>"
                + "<br>=============================<br><br>Best regards,<br><br>ExcelNet Administrator<br><br>"
                + "<div><img src=http://excelnet.xltrans.com/logo/images/-1168566039logoExcel.gif><div>";
        String toAddress = "";
        List tickerList = AdminService.getInstance().getTickerList(20);
        for (int i = 0; i < tickerList.size(); i++) {
            Ticker ticker = (Ticker) tickerList.get(i);
            if (toAddress.equalsIgnoreCase("")) {
                try {
                    toAddress = ticker.getUserEmail();
                } catch (Exception e) {
                }
            } else {
                try {
                    toAddress += "," + ticker.getUserEmail();
                } catch (Exception e) {
                }
            }
        }
        String[] emailList = toAddress.split(",");
        String emailSubjectTxt = "Vendor Quality Alert: " + resourceName + " (" + (String) qvpr.get("score") + ")";

        SendEmail smtpMailSender = new SendEmail();
        smtpMailSender.postMail(emailList, emailSubjectTxt, emailMsgTxt, "excelnet@xltrans.com");

//           qvpr = (DynaValidatorForm) form;
       // qvpr.set("taskId", taskId);
            request.setAttribute("taskId", ""+taskId);
            request.setAttribute("resourceViewId", ""+res.getResourceId());


        // JSObject win = (JSObject) JSObject.getWindow(this);
        //  win.eval("self.close();");
        return (mapping.findForward("Success"));


    }
}
